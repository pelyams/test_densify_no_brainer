use crate::base64_encoder_decoder::{base2_to_base64, base64_to_base2, Base64DecodeError};
use crate::bit_representer::{decode_to_vec, encode_to_bitwise_string, BitsDecodeError};
use std::fmt::Debug;

pub(crate) fn densify(s: &str) -> String {
    base2_to_base64(&encode_to_bitwise_string(s))
}

pub(crate) fn revert_to_original_vec(s: &str) -> Result<Vec<u16>, DensifyerError> {
    Ok(decode_to_vec(&base64_to_base2(s)?)?)
}

pub(crate) fn revert_to_original_string(s: &str) -> Result<String, DensifyerError> {
    Ok(decode_to_vec(&base64_to_base2(s)?)?
        .into_iter()
        .map(|v| v.to_string())
        .collect::<Vec<_>>()
        .join(","))
}

#[derive(Debug)]
pub(crate) enum DensifyerError {
    Base64DecodingError(Base64DecodeError),
    BitRepresentationDecodingError(BitsDecodeError),
}

impl From<Base64DecodeError> for DensifyerError {
    fn from(e: Base64DecodeError) -> Self {
        DensifyerError::Base64DecodingError(e)
    }
}

impl From<BitsDecodeError> for DensifyerError {
    fn from(e: BitsDecodeError) -> Self {
        DensifyerError::BitRepresentationDecodingError(e)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    //couple helpers
    #[inline]
    fn input_to_sorted_vec(s: &str) -> Vec<u16> {
        let mut v = s
            .split_terminator(",")
            .map(|n| u16::from_str_radix(n, 10).unwrap())
            .collect::<Vec<_>>();
        v.sort();
        v
    }

    #[inline]
    fn effectiveness(original_len: usize, compressed_len: usize) -> f64 {
        (original_len as f64 - compressed_len as f64) / (original_len as f64)
    }

    #[test]
    fn test_roundtrip_and_print_compression_rate() {
        let testcases = vec![
            (
                "basic_functioning",
                "3,55,107".to_string()
            ),
            (
                "encoding random 50 numbers",
                "274,60,11,50,47,63,104,195,291,91,66,99,194,140,145,136,243,20,13,257,262,280,92,134,279,230,33,57,86,245,119,67,223,101,121,83,144,246,128,57,127,75,271,132,15,33,29,45,242,232" .to_string(),
            ),
            (
                "encoding random 100 numbers",
                "284,178,197,280,90,37,297,201,62,5,66,33,129,169,36,155,142,140,79,57,278,277,171,37,201,74,284,172,107,174,113,277,244,83,222,265,214,90,142,24,150,91,89,27,3,169,116,203,298,101,256,206,72,99,231,62,224,87,95,277,148,36,211,295,225,72,25,276,10,195,29,109,38,21,101,59,170,72,261,112,75,82,271,32,153,178,261,285,137,250,43,202,6,254,108,2,130,17,277,292" .to_string(),

            ),
            (
                "encoding random 500 numbers",
                "250,26,140,223,33,91,222,184,159,76,183,287,219,116,253,293,226,260,29,281,228,108,271,39,131,195,273,261,253,24,197,223,160,207,14,46,284,5,46,292,48,219,105,17,112,108,57,21,155,165,207,299,150,74,201,75,194,130,251,198,107,39,194,15,186,260,40,24,112,103,155,63,113,68,13,158,139,140,101,109,276,138,175,178,276,287,13,30,195,81,214,114,291,29,90,165,85,214,31,95,281,182,50,117,126,54,224,272,97,60,185,6,107,1,281,206,43,154,112,221,263,294,149,12,205,44,186,29,94,51,52,82,81,198,184,274,88,73,39,236,241,278,46,11,291,218,183,84,103,247,191,8,239,296,168,4,40,182,125,264,187,90,198,203,133,247,196,272,218,94,257,149,281,265,242,180,141,5,249,147,88,87,222,53,117,29,289,123,62,163,163,124,183,228,73,33,292,3,114,239,167,279,278,174,262,122,110,240,158,82,283,257,64,211,106,18,230,193,63,256,193,210,90,106,205,20,155,147,261,273,83,220,7,180,63,107,89,66,136,184,258,259,73,66,250,222,252,266,147,121,92,264,244,175,181,52,191,127,218,268,189,30,169,273,65,145,275,21,204,3,135,204,144,133,222,75,10,178,298,277,18,101,245,224,12,115,225,83,13,278,200,72,235,175,239,257,48,298,43,223,100,97,272,297,53,105,26,144,283,209,165,133,229,184,59,72,147,292,84,187,50,164,86,29,288,35,42,121,175,67,85,246,132,92,221,213,162,158,87,2,172,278,119,232,140,182,299,214,101,52,7,277,233,155,211,170,254,160,211,20,216,180,205,186,106,198,69,7,196,159,258,199,151,31,62,206,293,264,229,136,170,250,24,11,57,24,52,158,163,92,116,164,158,88,270,279,180,87,68,136,287,238,184,253,3,72,208,137,141,10,270,157,300,215,274,151,183,180,288,54,32,290,122,113,250,185,276,64,96,185,180,6,87,20,168,23,259,227,56,230,234,280,26,109,259,75,88,203,270,113,92,280,52,170,234,241,130,185,222,51,234,227,98,46,140,100,160,176,241,70,2,90,280,238,85,89,52,94,108,141,142,181,64,196,273,16,246,263,252,111,162,299,153,252,47,56,171,152,22,187".to_string()
            ),
            (
                "encoding random 1000 numbers",
                "58,149,266,68,235,137,190,182,6,70,292,177,248,178,97,37,91,81,166,222,209,64,58,248,88,198,297,293,143,70,282,274,172,26,115,65,61,251,253,266,15,100,83,281,283,144,251,107,15,190,233,36,295,22,23,204,125,155,212,274,177,76,166,273,90,119,236,262,236,251,106,74,15,295,34,247,280,234,60,5,260,45,118,66,209,215,54,258,162,240,263,193,185,174,134,140,294,73,106,64,294,297,55,154,277,89,289,216,257,7,22,193,180,231,174,152,45,291,180,106,189,127,57,169,171,56,50,209,252,93,125,13,283,172,32,194,82,36,71,60,117,181,269,10,63,116,184,212,227,24,94,109,190,182,258,146,251,29,235,138,232,196,293,27,8,81,141,180,197,203,148,49,175,196,218,215,135,114,163,278,93,7,199,299,60,136,103,289,293,91,192,117,166,150,151,138,1,42,210,266,116,52,154,269,88,84,33,233,1,269,225,188,80,72,173,137,174,226,245,276,21,83,176,123,70,150,158,267,218,134,26,260,292,207,3,170,11,208,225,102,140,241,142,197,3,26,114,213,217,239,256,157,245,181,173,138,214,261,145,132,250,137,16,96,144,297,253,273,228,53,261,210,274,59,82,177,283,236,152,227,281,298,154,38,98,300,40,121,141,217,79,298,41,68,209,50,182,80,285,26,29,129,234,64,300,160,291,22,209,247,141,59,217,213,77,172,79,288,162,120,94,51,64,62,193,71,211,125,293,125,142,30,183,105,156,152,180,212,168,123,211,125,58,181,292,23,126,141,128,248,152,263,94,246,289,1,68,204,206,53,230,30,77,116,226,257,126,109,193,9,207,272,30,98,207,251,187,108,219,240,247,208,28,27,138,190,8,262,2,169,73,105,15,250,231,213,234,155,184,199,269,3,62,25,42,271,53,25,68,201,106,143,275,8,155,96,96,270,124,247,15,4,103,284,218,221,126,145,233,45,208,191,43,224,137,13,249,204,106,188,132,139,141,211,145,53,123,278,265,135,286,139,109,281,252,164,130,21,43,127,282,62,118,244,278,177,170,17,258,184,251,272,165,46,120,170,19,74,199,175,63,106,287,94,221,67,69,207,83,231,202,130,33,14,150,107,6,40,73,217,216,206,32,185,15,258,167,20,257,139,263,173,11,50,272,75,107,57,247,89,90,278,177,197,161,19,173,178,246,194,169,291,142,5,143,22,9,265,287,8,176,46,298,27,219,217,212,9,12,144,54,295,215,285,44,53,138,66,214,268,294,110,226,281,109,178,56,86,73,273,172,95,282,277,227,14,175,114,33,101,107,6,263,9,185,32,206,145,64,293,286,21,16,122,179,293,284,258,253,241,255,49,289,259,109,145,94,217,208,139,71,175,282,115,164,55,110,141,242,248,154,64,24,169,81,45,101,26,105,44,178,46,256,223,232,44,229,127,142,137,131,197,221,78,71,72,106,191,44,268,31,172,145,5,147,119,233,256,276,248,206,41,177,104,36,175,1,31,236,282,182,90,155,19,192,162,206,188,68,66,69,187,221,87,153,242,224,88,277,25,201,147,261,203,184,153,291,166,88,24,195,68,29,172,230,280,180,149,200,195,156,115,161,152,145,228,201,250,294,164,268,125,209,59,115,64,178,101,177,194,23,174,138,186,29,269,186,290,44,200,114,124,3,2,5,217,188,169,19,248,126,264,8,55,234,48,252,251,126,222,247,73,179,33,186,123,261,196,130,56,29,234,7,253,210,275,52,294,75,227,283,5,23,190,226,72,6,2,76,131,227,162,225,184,242,247,221,287,23,130,243,136,93,101,282,164,272,19,259,29,225,116,120,68,160,179,26,108,181,148,116,127,212,75,191,248,244,71,209,223,206,113,64,45,240,268,47,72,230,293,230,256,85,54,226,277,275,230,146,231,226,28,260,19,278,1,233,46,244,93,81,167,107,139,188,233,245,209,12,57,21,111,272,108,25,209,284,27,270,288,27,104,289,293,36,147,282,268,234,4,178,178,92,122,261,223,244,135,70,239,217,223,208,50,216,105,58,286,226,34,224,270,79,158,95,105,220,192,10,21,198,207,220,222,212,292,214,24,173,140,225,152,27,191,35,91,154,118,70,132,182,89,71,284,158,57,226,206,229,45,90,208,39,30,194,68,172,116,121,86,210,18,243,260,5,233,19,90,274,259,99,89,100,225,17,271,101,79,62,127,300,297,28,149,280,147,55,254,93,161,26,172,60,244,96,232,1,216,109,168".to_string()
            ),
            (
                "encoding all single character numbers",
                (1..=9).map(|n|n.to_string()).collect::<Vec<_>>().join(",")
            ),
            (
                "encoding all two character numbers",
                (10..=99).map(|n| n.to_string()).collect::<Vec<_>>().join(",")
            ),
            (
                "encoding all three character numbers",
                (100..=300).map(|n| n.to_string()).collect::<Vec<_>>().join(",")
            ),
            (
                "encoding all, three of each possible value",
                (1..300).map(|n| vec![n.to_string();3].join(",")).collect::<Vec<_>>().join(",")
            )
        ];

        testcases.iter().for_each(|(testname, input)| {
            let input_as_vec = input_to_sorted_vec(input);
            let output = densify(input);

            let reverted_output = revert_to_original_vec(&output);
            assert!(reverted_output.is_ok());

            let mut reverted_output = reverted_output.unwrap();
            reverted_output.sort();
            assert_eq!(reverted_output, input_as_vec);

            println!("----------");
            println!("testname: {}", testname);
            println!("input string: {input}");
            println!("output stiring: {output}");
            println!("compression: {}", effectiveness(input.len(), output.len()));
            println!("----------");
        });
    }

    #[test]
    fn test_empty_string_handling() {
        let densified = densify("");
        assert!(densified.is_empty());

        let reverted_vec = revert_to_original_vec(&densified).unwrap();
        assert_eq!(reverted_vec, vec![]);

        let reverted_string = revert_to_original_string(&densified).unwrap();
        assert_eq!(reverted_string, "");
    }

    #[test]
    fn test_invalid_characters() {
        let invalid_inputs = vec![
            "~",
            "`",
            "hello€World",
            "test\n",
            "test\t",
        ];

        for input in invalid_inputs {
            let result_vec = revert_to_original_vec(input);
            assert!(result_vec.is_err(), "should error for invalid base64: {}", input);

            match result_vec.unwrap_err() {
                DensifyerError::Base64DecodingError(_) => {},
                other => panic!("expected Base64DecodingError, got: {:?}", other),
            }

            let result_string = revert_to_original_string(input);
            assert!(result_string.is_err(), "should error for invalid base64: {}", input);
        }
    }
}
    

